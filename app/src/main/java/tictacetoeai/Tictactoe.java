/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tictacetoeai;

import java.util.ArrayList;
import java.util.List;

public class Tictactoe {
    private int[][][] possibleWinCondition = {{{0,0}, {0,1}, {0,2}}, {{0, 0}, {1,1}, {2, 2}}, {{0, 0}, {1,0}, {2,0}}, {{0,1} , {1,1}, {2,1}}, {{0,2}, {1,1}, {2,0}}, {{0,2}, {1,2}, {2,2}}, {{1,0}, {1,1}, {1,2}}, {{2,0}, {2,1}, {2,2}}};
    private int[][] prioritymoves = {{1, 1}, {0, 0}, {0,2}, {2,0}, {2,2}, {0,1}, {1,0}, {1,2}, {2,1}};
    private String[][] board;
    private String computerPlayer;

    public boolean winConditions(String board[][]){
        for(int possiblewins[][]: possibleWinCondition){
            if(!board[possiblewins[0][0]][possiblewins[0][1]].isEmpty() && board[possiblewins[0][0]][possiblewins[0][1]].equals(board[possiblewins[1][0]][possiblewins[1][1]]) && board[possiblewins[0][0]][possiblewins[0][1]].equals(board[possiblewins[2][0]][possiblewins[2][1]])){
                return true;
            }
        }
        return false;
    }

    public void setBoard(String board[][]){
        this.board = board;
    }

    public String[][] computerBestMove(int depth, String player){
        this.computerPlayer = player;
        int[] result = this.miniMax(depth, Integer.MIN_VALUE, Integer.MAX_VALUE, player);
        this.board[result[1]][result[2]] = this.computerPlayer;
        return this.board;
    }

    private int[] miniMax(int depth, int alpha, int beta, String player){
        List<int[]> generatedMoves = this.generateMoves();
        int currentScore;
        int bestRow = -1;
        int bestColumn = -1;
        if(depth == 0 || this.winConditions(this.board)){
            currentScore = moveScore();
            return new int[] {currentScore, bestRow, bestColumn};
        }
        for(int[] move: generatedMoves){
            this.board[move[0]][move[1]] = player;
            if(player.equals("x")){
                currentScore = miniMax(depth - 1, alpha, beta, "o")[0];
                if(currentScore > alpha){
                    alpha = currentScore;
                    bestRow = move[0];
                    bestColumn = move[1];
                }
            }else{
                currentScore = miniMax(depth - 1, alpha, beta, "x")[0];
                if(currentScore < beta){
                    beta = currentScore;
                    bestRow = move[0];
                    bestColumn = move[1];
                }
            }
            this.board[move[0]][move[1]]="";
            if (alpha >= beta) break;
        }
        return new int[] {(player == "x") ? alpha : beta, bestRow, bestColumn};
    }

    private List<int[]> generateMoves(){
        List<int[]> moves = new ArrayList<int[]>();
        for(int index[]: this.prioritymoves){
            if(board[index[0]][index[1]].isEmpty()){
                moves.add(new int[] {index[0], index[1]});
            }
        }
        return moves;
    }

    private int moveScore(){
        int score = 0;
        score += evaluateline(0, 0, 0, 1, 0, 2);
        score += evaluateline(1, 0, 1, 1, 1, 2);
        score += evaluateline(2, 0, 2, 1, 2, 2);
        score += evaluateline(0, 0, 1, 0, 2, 0);
        score += evaluateline(0, 1, 1, 1, 2, 1);
        score += evaluateline(0, 2, 1, 2, 2, 2);
        score += evaluateline(0, 0, 1, 1, 2, 2);
        score += evaluateline(0, 2, 1, 1, 2, 0);
        return score;
    }

    private int evaluateline(int row0, int column0, int row1, int column1, int row2, int column2){
        int score = 0;
        if(this.board[row0][column0] == "x"){
            score = 1;
        }else if(this.board[row0][column0] == "o"){
            score = -1;
        }

        if(this.board[row1][column1] == "x"){
            if(score == 1){
                score = 10;
            }else if(score == -1){
                return 0;
            }else{
                score = 1;
            }
        }else if(this.board[row1][column1] == "o"){
            if(score == -1){
                score = -10;
            }else if(score == 1){
                return 0;
            }else{
                score = -1;
            }
        }

        if(this.board[row2][column2] == "x"){
            if(score > 0){
                score *= 10;
            }else if(score < 0){
                return 0;
            }else{
                score = 1;
            }
        }else if(this.board[row2][column2] == "o"){
            if(score < 0){
                score *= 10;
            }else if(score < 0){
                return 0;
            }else{
                score = -1;
            }
        }
        return score;
    }

}
